struct Node {
    int value;
    int size;
    Node *left_son, *right_son;
};

Node *createNode(int val) {
    Node *res = new Node();
    res->value = val;
    res->size = 1;
    res->left_son = res->right_son = nullptr;

    return res;
}

Node *insertNode(Node *root, int val) {
    if (root == nullptr) return createNode(val);

    if (val > root->value) {
        root->right_son = insertNode(root->right_son, val);
    } else if (val < root->value) {
        root->left_son = insertNode(root->left_son, val);
    }

    root->size = 1;
    if (root->left_son != nullptr) root->size += root->left_son->size;
    if (root->right_son != nullptr) root->size += root->right_son->size;

    return root;
}

void print(Node *tree) {
    if (tree != nullptr) {
        print(tree->left_son);
        cout << tree->value << ' ';
        print(tree->right_son);
    }
}

Node *getmin(Node *root) {
    while (root != nullptr && root->left_son != nullptr) root = root->left_son;
    return root;
}

Node *deleteNode(Node *root, int val) {
    if (root == nullptr) return root;
    if (val > root->value) {
        root->right_son = deleteNode(root->right_son, val);
    } else if (val < root->value) {
        root->left_son = deleteNode(root->left_son, val);
    } else {
        if (root->left_son == nullptr) {
            Node *ubub = root->right_son;
            delete root;
            return ubub;
        } else if (root->right_son == nullptr) {
            Node *ubub = root->left_son;
            delete root;
            return ubub;
        }

        Node *temp = getmin(root->right_son);
        root->value = temp->value;
        root->right_son = deleteNode(root->right_son, temp->value);
    }

    root->size = 1;
    if (root->left_son != nullptr) root->size += root->left_son->size;
    if (root->right_son != nullptr) root->size += root->right_son->size;

    return root;
}

Node *searchNode(Node *root, int val) {
    if (root == nullptr) return root;
    if (val > root->value) {
        return searchNode(root->right_son, val);
    } else if (val < root->value) {
        return searchNode(root->left_son, val);
    } else {
        return root;
    }
}

Node* searchKthMax(Node* root, int k) {
    if (root == nullptr) return nullptr;
    int right_size = (root->right_son != nullptr) ? root->right_son->size : 0;

    if (right_size + 1 == k) {
        return root;
    } else if (right_size >= k) {
        return searchKthMax(root->right_son, k);
    } else {
        return searchKthMax(root->left_son, k - right_size - 1);
    }
}